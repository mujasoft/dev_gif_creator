#!/usr/bin/env bash
#
# vid2gif - Convert video files (.mp4, .mov, etc.) into optimized GIFs using FFmpeg
#
# Author: Mujaheed Khan (https://github.com/mujasoft)
# License: MIT
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.


set -e

# Supporting functions ======================================================= #
function usage() {
    echo ""
    echo "Convert a video file (.mov, .mp4, etc.) to an optimized GIF using FFmpeg."
    echo ""
    echo "Usage:"
    echo "  $0 -i <input_file> [-o <output_basename> -t]"
    echo ""
    echo "Option(s):"
    echo "  -h --help       print this help text"
    echo "  -i              input video file (required)"
    echo "  -o              output base name (optional, default: output)"
    echo "  -t              add timestamp to output file (optional, default: false)"
    echo "  -v --version    print version"
    echo ""
    echo "Examples:"
    echo "  $0 -i demo.mov"
    echo "  $0 -i video.mp4 -o demo.gif -t"
    echo ""
    echo "Output:"
    echo "  GIF will be saved as: <output>.gif or <output>_YYYY-MM-DD_HH-MM-SS.gif"
    echo ""
    exit 1
}

convert_mov_to_gif() {
  input="$1"
  palette="$2"
  output="$3"

  # Extract input width using ffprobe
  width=$(ffprobe -v error -select_streams v:0 -show_entries stream=width \
          -of default=noprint_wrappers=1:nokey=1 "$input")

  # Decide target scale based on width
  if [ "$width" -ge 1200 ]; then
    scale_width=1024
  elif [ "$width" -ge 900 ]; then
    scale_width=960
  else
    scale_width=640
  fi

  echo "*** Detected input width: $width â†’ scaling to $scale_width"

  echo "*** Generating palette..."
  ffmpeg -y -i "$input" -vf "fps=10,scale=${scale_width}:-1:flags=lanczos,palettegen" "$palette"

  echo "*** Creating optimized GIF..."
  ffmpeg -y -i "$input" -i "$palette" \
    -filter_complex "fps=10,scale=${scale_width}:-1:flags=lanczos[x];[x][1:v]paletteuse" "$output"

  echo "*** GIF saved as: $output"
}

print_version(){
  export VERSION="1.0.2"
  echo "vid2gif v$VERSION"
  exit 0
}

print_red() {
  echo -e "\033[0;31m$1\033[0m"
}

print_bold_white() {
  echo -e "\033[1;37m$1\033[0m"
}

# Long help flag.
if [ "$1" = "--help" ]; then
  usage
fi

# Show help if no arguments were passed
if [ $# -eq 0 ]; then
  usage
fi

if [ "$1" = "--version" ]; then
  print_version
fi


# Parse CLI arguments.
while getopts "i:o:thv" opt; do
  case $opt in
    i) INPUT="$OPTARG" ;;
    o) OUTPUT="$OPTARG" ;;
    h) usage ;;
    t) TIMESTAMP_REQUEST="1" ;;
    v) print_version ;;
    \?) print_red "*** Invalid option -$OPTARG" >&2; usage ;;
    :) print_red "*** Option -$OPTARG requires an argument." >&2; usage ;;
  esac
done

# Check for required input.
if [ -z "$INPUT" ]; then
  print_red "*** Error: input file is required (-i)"
  usage
fi

case "$INPUT" in
  *.mp4|*.mov|*.avi|*.mkv|*.webm|*.flv|*.m4v|*.ts)
    ;;
  *)
    print_red "Unsupported input format!"
    echo "Supported formats: mp4, mov, avi, mkv, webm, flv, m4v, ts"
    exit 1
    ;;
esac

# Check if ffmpeg is installed.
if ! command -v ffmpeg &> /dev/null; then
  print_red "Error: ffmpeg is not installed or not in your PATH!"
  echo "Install it using Homebrew (macOS): brew install ffmpeg"
  echo "More: https://ffmpeg.org/download.html"
  exit 1
fi

# Set timestamp and derived filenames.
TS=$(date "+%Y-%m-%d_%H-%M-%S")
PALETTE=".palette_${TS}.png"
OUTPUT_NAME="${OUTPUT:-output}"

# Build final output name based on suffix check.
if expr "$OUTPUT_NAME" : '.*\.gif$' > /dev/null; then
  OUTPUT_BASENAME="${OUTPUT_NAME%.gif}"
else
  OUTPUT_BASENAME="$OUTPUT_NAME"
fi

if [ -z "$TIMESTAMP_REQUEST" ]; then
  FINAL_OUTPUT="${OUTPUT_BASENAME}.gif"
else
  FINAL_OUTPUT="${OUTPUT_BASENAME}_${TS}.gif"
fi 

convert_mov_to_gif "$INPUT" "$PALETTE" "$FINAL_OUTPUT"
